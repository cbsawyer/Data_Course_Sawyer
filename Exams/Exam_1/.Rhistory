?split
?split.data.frame
#split.data.frame(df$Province_State,f = (pattern="^A"))
#Tried that ^ Nope, didn't work either
a <- grepl(df$Province_State,pattern='^A')
s <- split(df, a)
#AYOOO it split into T/F. Nice. Now--
s
s$`TRUE`
dfast <- s$`TRUE`
dfast
#That's for df, starts with "A", from the split, the half that's "true"
class(dfast)
A_states <- dfast
A_states
#That was a complicated way, I could have done it easier, I'm sure, but hey, I
#had fun.'
#Just for shits, could I use readLines?
?readLines
#can I.... read lines of df column state, and only if pattern is right?
#readLines(df,
#          pattern="^A")
#Nope, it doesn't like that pattern there
#What aboutttttttt
#read.csv("cleaned_covid_data.csv")[df$Province_State=="^A",]
#No, also doesn't like it there.
#df$Province_State[pattern=="^A",]
#df[pattern=="^A",]
?pattern
#k fine, I'm being dumb
#concatenating the columns, thinking that would work, but I'm dumb
#cstate <- c(df$Province_State,
# df$Last_Update,
# df$Confirmed,
# df$Deaths,
# df$Recovered,
# df$Active,
# df$Case_Fatality_Ratio)
#ignore that ^
#
# df[pattern=="^A",["Province_State"]]
#nope that doesn't work
df$Province_State
df[["Province_State"]]
#K so those are the same thing
?subset
subset(df,subset = a,select = Province_State:Case_Fatality_Ratio, drop=FALSE)
#Oooooooooh that also worked!
A_states2 <- subset(df,a,Province_State:Case_Fatality_Ratio,FALSE)
#Okay, so the same thing, just a little cleaner
# df[df$Province_State == "^A",]
#I feel like that should work, but it doesn't
#Anyway, sorry for the long explanation, I know you don't
#need both, but it was fun, so heeeeeeeere's both of em:
A_states
A_states2
## Part III. ##
#plot of it showing deaths over time, 1 facet per state
library(GGally)
head(A_states)
class(A_states$Last_Update)
class(A_states$Deaths)
class(as.Date.character(A_states$Last_Update))
#idk if this format is the default, but I had enough dumb problems that it's
#there anyway
d <- as.Date.character(A_states$Last_Update, format = "%Y-%m-%d")
class(d)
#Alright, no more chr, we got dates. I hope it works with plots.
?geom_smooth
df
#ad <- as.Date.character(A_states$Last_Update, format = "%Y-%m-%d")
A_states %>%
ggplot(aes(x=d,
y=A_states$Deaths))+
geom_point(size=0.6)+
facet_wrap(~A_states$Province_State,
scales = "free")+
geom_smooth(se=FALSE)
#Added this to make it look nicer before realizing "free scales"
#  scale_x_date(date_labels = "%m %Y",
#               date_breaks = "2 months")
#Don't think it even worked, but I'm leavin it here.
#FINALLY got it.
#I really like how we didn't talk about a couple of these things (or I'm just
#dumb and don't remember), but they were figure-out-able as long as you know
#how to use "?", google, tab, and such. Cool stuff.
## PART IV. ##
#Back to df, NOT A_states
#New df, with 1 column for states, 1 column for their respective max
#case_fatality_ratio. Save as "state_max_fatality_rate"
# descending order
summary(df$Case_Fatality_Ratio)
max(df$Case_Fatality_Ratio)
class(df$Case_Fatality_Ratio)
?max
max(df$Case_Fatality_Ratio, na.rm=TRUE)
#k so that's max with NA removed
# for (i in df$Province_State) {print(
#   max(df$Case_Fatality_Ratio)
# )}
list(df$Province_State)
# K lets just write this out. What do I want to DO:
#There's a lot of states. I don't want to do it each time for all 50+ individual
#states. I'm hoping to figure out a for-loop here.
#What I want: for each unique value of df$Province_State, calc max CFR value.
#So to make each unique state its own column, with each row a value from the df.
#OR, I could think of it like, for each unique state, check the last value
#recorded for that state. If the new, for-loop value is bigger, replace that
# last value as the new max. But this would have to be done for EACH state.
#max_value(df$Case_Fatality_Ratio)
#max
#pmax(df$Case_Fatality_Ratio)
?pmax
split <- split(df$Case_Fatality_Ratio, df$Province_State)
#K so that gets a list of each state with its values. Rather, it splits the CFR
#values BY state.
class(split)
#So how do I get max for each? Internet went down again so I'll try moving to
#number 5 for now. Nevermind, it needs the data set from part 4.
#Notes to try: Purrr? Maybe a for loop from here, actually? So it'd just be
# max per vector in this list? For (i) in (list), perform max of i?
#So for (i in split) {
#  print(max(i))
#}
# head(split)
# split
# dim(split)
splitdf <- data.frame(split)
# splitmatrix <- matrix(split)
# splitmatrix
# splitdft <- t(splitdf)
# ?t()
# class()
#
# dim(splitdft)
# splitdft
#
# dim(splitdf)
splitdf
t(splitdf)
for (i in split) {
(print(max(i, na.rm = TRUE)))
# sort(decreasing=TRUE)
}
#%>%
#   sort(decreasing=TRUE)
?print
?output
?rbind
?rbind
#Just gonna double check a couple to make sure it worked right
#yah... nope. I think the pi
#K so actually I'm gonna use the "normal civilized way" to do this:
state_max_fatality_rate <-
df %>%
group_by(Province_State) %>%
summarize(Max_Fatality_Ratio=max(Case_Fatality_Ratio,
na.rm=TRUE)) %>%
arrange(desc(Max_Fatality_Ratio))
state_max_fatality_rate
## PART V. ##
# x=province state
# y=max fat ratio
# bar plot
# x=in descending order (make factor)
# x axis turned 90 degrees DO THIS
# should be able to see diff states had diff ratios
state_max_fatality_rate
state_max_fatality_rate %>%
ggplot(aes(x=reorder(Province_State, -Max_Fatality_Ratio),
y=Max_Fatality_Ratio))+
geom_col()+
theme(axis.text.x = element_text(angle = 90))
# order(desc(f))
# ?arrange
# as.integer(factor(levels= c(state_max_fatality_rate$max_case_fatality_ratio)))
# factor(state_max_fatality_rate$max_case_fatality_ratio)
# class(f)
# ?geom_bar
# class(Uhh)
# p <- ggplot(df, aes(x = reorder(f.name, -age), y = age))
# Found this that worked
## PART VI. ##
# class(df$Deaths)
#
# y=cumsum(df$Deaths)
# x=Last_Update
#
df
# ohno <-
df %>%
group_by(Last_Update) %>%
summarize(cumsumdeaths=cumsum(Deaths)) %>%
ggplot(aes(x=as.Date(Last_Update),
y=cumsumdeaths))+
geom_col()
#
#   scale_x_date(date_breaks = "1 month", date_labels = "%Y")
#
# class(L)
#  theme(axis.text.x = element_text(angle = 90))
# ?cumsum
# df %>%
#   group_by(Province_State) %>%
#   summarize(max_case_fatality_ratio=max(Case_Fatality_Ratio,
#                                         na.rm=TRUE)) %>%
#   arrange(desc(max_case_fatality_ratio))
# #
# dfd <- as.Date(df$Last_Update, format = "%Y-%m-%d")
#
# class(dfd)
#
# head(df)
#
# ?as.Date.character
# ?summarise
# summarise
#
# dfd
### Exam 1 Raw Answers ###
# No thought processes, trail and error, or wrong paths are included here. Just
#used to test valid, simple code. See the other file for full extraneous info
library(tidyverse)
# Part 1
df <- read.csv("./cleaned_covid_data.csv")
#Part 2
a <- grepl(df$Province_State,pattern='^A')
s <- split(df, a)
A_states <- s$`TRUE`
#Part 3
A_states %>%
ggplot(aes(x=as.Date(Last_Update),
y=Deaths))+
geom_point(size=0.6)+
facet_wrap(~Province_State,
scales = "free")+
geom_smooth(se=FALSE)
#Part 4
state_max_fatality_rate <-
df %>%
group_by(Province_State) %>%
summarize(Maximum_Fatality_Ratio=max(Case_Fatality_Ratio,
na.rm=TRUE)) %>%
arrange(desc(Maximum_Fatality_Ratio))
#Part 5
state_max_fatality_rate %>%
ggplot(aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio))+
geom_col()+
theme(axis.text.x = element_text(angle = 90))
#Part 6
df %>%
group_by(Last_Update) %>%
summarize(cumsumdeaths=cumsum(Deaths)) %>%
ggplot(aes(x=as.Date(Last_Update),
y=cumsumdeaths))+
geom_col()
### EXAM 1 ###
## Skills Test #1 ##
# Real shit baby here we goooooooooo
# Begin with le baby shit, cause we gonna need it:
library(tidyverse)
## Part I. ##
#Read cleaned_covid_data into a data frame:
read.csv("./cleaned_covid_data.csv")
#Btw, there's the filepath. In a new R proj, so I hope this is figured out
#correctly
df <- read.csv("./cleaned_covid_data.csv")
df
#Wow, So long as the filepaths work, that's 20 points. Right...?
## Part II. ##
#Subset data set to show only those states that begin with "A"
# Save as A_states
#Hold up, so only the states that start with A themselves? Or the rows with the states that start
#with A?
?grep
#only diff between grep and grep1 is value being T/F. Couldn't really determine
#the use of that, but I'll just use grep1
grepl(df$Province_State,pattern='^A')
#Means in df's column named "Provice_State", where the pattern STARTS with "A"
#Report T/F
#Now how to get the T/F to a data set by itself
#subset(df(grepl(df$Province_State,pattern='^A')))
# ^^^ That didn't work, but through google-fu, I think I'm gonna try to split it
?split
?split.data.frame
#split.data.frame(df$Province_State,f = (pattern="^A"))
#Tried that ^ Nope, didn't work either
a <- grepl(df$Province_State,pattern='^A')
s <- split(df, a)
#AYOOO it split into T/F. Nice. Now--
s
s$`TRUE`
dfast <- s$`TRUE`
dfast
#That's for df, starts with "A", from the split, the half that's "true"
class(dfast)
A_states <- dfast
A_states
#That was a complicated way, I could have done it easier, I'm sure, but hey, I
#had fun.'
#Just for shits, could I use readLines?
?readLines
#can I.... read lines of df column state, and only if pattern is right?
#readLines(df,
#          pattern="^A")
#Nope, it doesn't like that pattern there
#What aboutttttttt
#read.csv("cleaned_covid_data.csv")[df$Province_State=="^A",]
#No, also doesn't like it there.
#df$Province_State[pattern=="^A",]
#df[pattern=="^A",]
?pattern
#k fine, I'm being dumb
#concatenating the columns, thinking that would work, but I'm dumb
#cstate <- c(df$Province_State,
# df$Last_Update,
# df$Confirmed,
# df$Deaths,
# df$Recovered,
# df$Active,
# df$Case_Fatality_Ratio)
#ignore that ^
#
# df[pattern=="^A",["Province_State"]]
#nope that doesn't work
df$Province_State
df[["Province_State"]]
#K so those are the same thing
?subset
subset(df,subset = a,select = Province_State:Case_Fatality_Ratio, drop=FALSE)
#Oooooooooh that also worked!
A_states2 <- subset(df,a,Province_State:Case_Fatality_Ratio,FALSE)
#Okay, so the same thing, just a little cleaner
# df[df$Province_State == "^A",]
#I feel like that should work, but it doesn't
#Anyway, sorry for the long explanation, I know you don't
#need both, but it was fun, so heeeeeeeere's both of em:
A_states
A_states2
## Part III. ##
#plot of it showing deaths over time, 1 facet per state
library(GGally)
head(A_states)
class(A_states$Last_Update)
class(A_states$Deaths)
class(as.Date.character(A_states$Last_Update))
#idk if this format is the default, but I had enough dumb problems that it's
#there anyway
d <- as.Date.character(A_states$Last_Update, format = "%Y-%m-%d")
class(d)
#Alright, no more chr, we got dates. I hope it works with plots.
?geom_smooth
df
#ad <- as.Date.character(A_states$Last_Update, format = "%Y-%m-%d")
A_states %>%
ggplot(aes(x=d,
y=A_states$Deaths))+
geom_point(size=0.6)+
facet_wrap(~A_states$Province_State,
scales = "free")+
geom_smooth(se=FALSE)
#Added this to make it look nicer before realizing "free scales"
#  scale_x_date(date_labels = "%m %Y",
#               date_breaks = "2 months")
#Don't think it even worked, but I'm leavin it here.
#FINALLY got it.
#I really like how we didn't talk about a couple of these things (or I'm just
#dumb and don't remember), but they were figure-out-able as long as you know
#how to use "?", google, tab, and such. Cool stuff.
## PART IV. ##
#Back to df, NOT A_states
#New df, with 1 column for states, 1 column for their respective max
#case_fatality_ratio. Save as "state_max_fatality_rate"
# descending order
summary(df$Case_Fatality_Ratio)
max(df$Case_Fatality_Ratio)
class(df$Case_Fatality_Ratio)
?max
max(df$Case_Fatality_Ratio, na.rm=TRUE)
#k so that's max with NA removed
# for (i in df$Province_State) {print(
#   max(df$Case_Fatality_Ratio)
# )}
list(df$Province_State)
# K lets just write this out. What do I want to DO:
#There's a lot of states. I don't want to do it each time for all 50+ individual
#states. I'm hoping to figure out a for-loop here.
#What I want: for each unique value of df$Province_State, calc max CFR value.
#So to make each unique state its own column, with each row a value from the df.
#OR, I could think of it like, for each unique state, check the last value
#recorded for that state. If the new, for-loop value is bigger, replace that
# last value as the new max. But this would have to be done for EACH state.
#max_value(df$Case_Fatality_Ratio)
#max
#pmax(df$Case_Fatality_Ratio)
?pmax
split <- split(df$Case_Fatality_Ratio, df$Province_State)
#K so that gets a list of each state with its values. Rather, it splits the CFR
#values BY state.
class(split)
#So how do I get max for each? Internet went down again so I'll try moving to
#number 5 for now. Nevermind, it needs the data set from part 4.
#Notes to try: Purrr? Maybe a for loop from here, actually? So it'd just be
# max per vector in this list? For (i) in (list), perform max of i?
#So for (i in split) {
#  print(max(i))
#}
# head(split)
# split
# dim(split)
splitdf <- data.frame(split)
# splitmatrix <- matrix(split)
# splitmatrix
# splitdft <- t(splitdf)
# ?t()
# class()
#
# dim(splitdft)
# splitdft
#
# dim(splitdf)
splitdf
t(splitdf)
for (i in split) {
(print(max(i, na.rm = TRUE)))
# sort(decreasing=TRUE)
}
#%>%
#   sort(decreasing=TRUE)
?print
?output
?rbind
?rbind
#Just gonna double check a couple to make sure it worked right
#yah... nope. I think the pi
#K so actually I'm gonna use the "normal civilized way" to do this:
state_max_fatality_rate <-
df %>%
group_by(Province_State) %>%
summarize(Maximum_Fatality_Ratio=max(Case_Fatality_Ratio,
na.rm=TRUE)) %>%
arrange(desc(Maximum_Fatality_Ratio))
state_max_fatality_rate
## PART V. ##
# x=province state
# y=max fat ratio
# bar plot
# x=in descending order (make factor)
# x axis turned 90 degrees DO THIS
# should be able to see diff states had diff ratios
state_max_fatality_rate
state_max_fatality_rate %>%
ggplot(aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio))+
geom_col()+
theme(axis.text.x = element_text(angle = 90))
# order(desc(f))
# ?arrange
# as.integer(factor(levels= c(state_max_fatality_rate$max_case_fatality_ratio)))
# factor(state_max_fatality_rate$max_case_fatality_ratio)
# class(f)
# ?geom_bar
# class(Uhh)
# p <- ggplot(df, aes(x = reorder(f.name, -age), y = age))
# Found this that worked
## PART VI. ##
# class(df$Deaths)
#
# y=cumsum(df$Deaths)
# x=Last_Update
#
df
# ohno <-
df %>%
group_by(Last_Update) %>%
summarize(cumsumdeaths=cumsum(Deaths)) %>%
ggplot(aes(x=as.Date(Last_Update),
y=cumsumdeaths))+
geom_col()
#
#   scale_x_date(date_breaks = "1 month", date_labels = "%Y")
#
# class(L)
#  theme(axis.text.x = element_text(angle = 90))
# ?cumsum
# df %>%
#   group_by(Province_State) %>%
#   summarize(max_case_fatality_ratio=max(Case_Fatality_Ratio,
#                                         na.rm=TRUE)) %>%
#   arrange(desc(max_case_fatality_ratio))
# #
# dfd <- as.Date(df$Last_Update, format = "%Y-%m-%d")
#
# class(dfd)
#
# head(df)
#
# ?as.Date.character
# ?summarise
# summarise
#
# dfd
state_max_fatality_rate
View(A_states2)
library(tidyverse)
# Part 1
df <- read.csv("./cleaned_covid_data.csv")
a <- grepl(df$Province_State,pattern='^A')
a
s <- split(df, a)
s
